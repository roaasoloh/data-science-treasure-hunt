{"version":3,"sources":["components/ui/Card.js","App.js","reportWebVitals.js","index.js"],"names":["Card","_ref","children","React","createElement","className","InfiniteScrollPage","posts","setPosts","useState","loading","setLoading","page","setPage","useEffect","loadMorePosts","window","addEventListener","handleScroll","removeEventListener","innerHeight","document","documentElement","scrollTop","offsetHeight","setTimeout","newPosts","Array","from","length","_","i","id","text","link","prev","map","post","key","href","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode","App"],"mappings":"+JAEO,SAASA,EAAIC,GAAe,IAAdC,SAAEA,GAAUD,EAC/B,OAAOE,IAAAC,cAAA,OAAKC,UAAU,gCAAgCH,GCCzC,SAASI,IACtB,MAAOC,EAAOC,GAAYC,mBAAS,KAC5BC,EAASC,GAAcF,oBAAS,IAChCG,EAAMC,GAAWJ,mBAAS,GAEjCK,oBAAU,KACRC,IACAC,OAAOC,iBAAiB,SAAUC,GAC3B,IAAMF,OAAOG,oBAAoB,SAAUD,IACjD,IAEH,MAAMA,EAAeA,KAEjBF,OAAOI,YAAcC,SAASC,gBAAgBC,YAC9CF,SAASC,gBAAgBE,cAEzBT,KAIEA,EAAgBA,KAChBL,IACJC,GAAW,GAEXc,WAAW,KACT,MAAMC,EAAWC,MAAMC,KAAK,CAAEC,OAAQ,IAAM,CAACC,EAAGC,KAAC,CAC/CC,GAAIzB,EAAMsB,OAASE,EAAI,EACvBE,cAAe1B,EAAMsB,OAASE,EAAI,OAIhCxB,EAAMsB,OAAS,IAAM,KACvBH,EAAS,GAAGO,KAAO,wDACnBP,EAAS,GAAGQ,KAAO,yDAGrB1B,EAAU2B,GAAS,IAAIA,KAAST,IAChCf,GAAW,IACV,OAGL,OACER,IAAAC,cAAA,OAAKC,UAAU,OACbF,IAAAC,cAAA,MAAIC,UAAU,0BAAyB,gCACvCF,IAAAC,cAAA,OAAKC,UAAU,aACZE,EAAM6B,IAAKC,GACVlC,IAAAC,cAACJ,EAAI,CAACsC,IAAKD,EAAKL,GAAI3B,UAAU,OAC3BgC,EAAKJ,KACLI,EAAKH,MACJ/B,IAAAC,cAAA,KAAGmC,KAAMF,EAAKH,KAAM7B,UAAU,4BAA2B,2BAOhEK,GAAWP,IAAAC,cAAA,KAAGC,UAAU,sBAAqB,oBChDrCmC,MAZSC,IAClBA,GAAeA,aAAuBC,UACxCC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,UAAqBD,KAAK5C,IAAiD,IAAhD8C,OAAEA,EAAMC,OAAEA,EAAMC,OAAEA,EAAMC,OAAEA,EAAMC,QAAEA,GAASlD,EACpE8C,EAAON,GACPO,EAAOP,GACPQ,EAAOR,GACPS,EAAOT,GACPU,EAAQV,MCDDW,IAASC,WAAWhC,SAASiC,eAAe,SACpDC,OACHpD,IAAAC,cAACD,IAAMqD,WAAU,KACfrD,IAAAC,cAACqD,EAAG,QAORjB","file":"static/js/main.14b62427.chunk.js","sourcesContent":["import React from \"react\";\n\nexport function Card({ children }) {\n  return <div className=\"border p-4 rounded-lg shadow\">{children}</div>;\n}\n","import { useState, useEffect } from \"react\";\nimport { Card } from \"./components/ui/Card\";\nimport React from \"react\";\n\nexport default function InfiniteScrollPage() {\n  const [posts, setPosts] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [page, setPage] = useState(1);\n\n  useEffect(() => {\n    loadMorePosts();\n    window.addEventListener(\"scroll\", handleScroll);\n    return () => window.removeEventListener(\"scroll\", handleScroll);\n  }, []);\n\n  const handleScroll = () => {\n    if (\n      window.innerHeight + document.documentElement.scrollTop ===\n      document.documentElement.offsetHeight\n    ) {\n      loadMorePosts();\n    }\n  };\n\n  const loadMorePosts = () => {\n    if (loading) return;\n    setLoading(true);\n\n    setTimeout(() => {\n      const newPosts = Array.from({ length: 10 }, (_, i) => ({\n        id: posts.length + i + 1,\n        text: `Post #${posts.length + i + 1}`,\n      }));\n\n      // Insert the secret clue at post #25\n      if (posts.length + 1 === 25) {\n        newPosts[0].text = \"Clue: Download the LEGO Database dataset from Kaggle!\";\n        newPosts[0].link = \"https://www.kaggle.com/datasets/rtatman/lego-database\";\n      }\n\n      setPosts((prev) => [...prev, ...newPosts]);\n      setLoading(false);\n    }, 1000);\n  };\n\n  return (\n    <div className=\"p-5\">\n      <h1 className=\"text-xl font-bold mb-4\">Infinite Scrolling Clue Hunt</h1>\n      <div className=\"space-y-3\">\n        {posts.map((post) => (\n          <Card key={post.id} className=\"p-3\">\n            {post.text}\n            {post.link && (\n              <a href={post.link} className=\"text-blue-500 block mt-2\">\n                Get the Dataset Here\n              </a>\n            )}\n          </Card>\n        ))}\n      </div>\n      {loading && <p className=\"text-gray-500 mt-4\">Loading more...</p>}\n    </div>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}